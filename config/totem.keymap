#include <behaviors.dtsi>
#include "keys_br_abnt2.h"
#include "helper.h"
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define BLE  1
#define NUM  2
#define SYM  3
#define FUN  4
#define gam  5
#define NAV  6
#define FGM  7

AC_KEY(A_acute, BR_A, BR_ACUT)
AC_KEY(A_grave, BR_A, BR_GRAVE)
AC_KEY(A_tilde, BR_A, BR_TILDE)
AC_KEY(A_circ,  BR_A, BR_CIRC)

AC_KEY(E_acute, BR_E, BR_ACUT)
AC_KEY(E_circ,  BR_E, BR_CIRC)

AC_KEY(I_acute, BR_I, BR_ACUT)

AC_KEY(O_acute, BR_O, BR_ACUT)
AC_KEY(O_tilde, BR_O, BR_TILDE)
AC_KEY(O_circ,  BR_O, BR_CIRC)

AC_KEY(U_acute, BR_U, BR_ACUT)

UNDEAD_KEY(tilde, BR_TILDE)
UNDEAD_KEY(caret, BR_CIRC)
UNDEAD_KEY(grave, BR_GRAVE)

&lt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "balanced";
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // combo_esc {
        //timeout-ms = <50>;
        //key-positions = <13 16>;
        //  bindings = <&caps_word>;
        //  };

        game {
            timeout-ms = <50>;
            bindings = <&tog 5>;
            key-positions = <34 13 12>;
            layers = <0>;
        };

        close {
            timeout-ms = <50>;
            bindings = <&close>;
            key-positions = <0 1 2 3>;
            layers = <0>;
        };

        prtsc_combo {
            timeout-ms = <50>;
            bindings = <&kp PRINTSCREEN>;
            key-positions = <5 4>;
            layers = <0>;
        };

        caps {
            timeout-ms = <50>;
            bindings = <&caps_word>;
            key-positions = <22 23 24>;
            layers = <0>;
        };

        esc {
            timeout-ms = <50>;
            bindings = <&kp ESC>;
            key-positions = <11 12 13>;
            layers = <0>;
        };

        del {
            timeout-ms = <50>;
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            layers = <0>;
        };

        quest {
            bindings = <&kp BR_QMARK>;
            key-positions = <29 28 27>;
            layers = <0>;
        };

        lgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <10 11>;
            layers = <0>;
        };

        rgui {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <19 18>;
            layers = <0>;
        };
    };

    macros {
        close: close {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp F4>,
                <&macro_release>,
                <&kp LALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
       &kp BR_Q       &kp BR_W        &kp BR_E        &kp BR_R     &kp BR_T     &kp BR_Y        &kp BR_U        &kp BR_I       &kp BR_O      &kp BR_P
       &kp BR_A  &hm LALT BR_S  &hm LSHFT BR_D  &hm LCTRL BR_F     &kp BR_G     &kp BR_H  &hm RCTRL BR_J  &hm RSHFT BR_K  &hm RALT BR_L   &kp BR_SEMI
&none  &kp BR_Z       &kp BR_X        &kp BR_C      &lt 1 BR_V     &kp BR_B     &kp BR_N      &lt 1 BR_M    &kp BR_COMMA     &kp BR_DOT  &kp BR_SLASH  &none
                                         &none       &lt 4 TAB  &lt 2 SPACE     &lt 3 ENTER      &lt 6 BSPC           &none
            >;
        };

        ble_layer {
            bindings = <
            &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2        &none        &none  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &none
            &none         &none  &out OUT_TOG         &none        &none        &none         &none  &out OUT_TOG         &none  &none
&none  &bt BT_CLR         &none         &none         &none        &none        &none         &none         &none    &bt BT_CLR  &none  &none
                                        &none        &reset  &bootloader        &bootloader        &reset         &none
            >;
        };

        number_layer {
            bindings = <
         &kp BR_DQT  &kp BR_EXCL     &kp BR_AT  &kp BR_HASH  &kp BR_DLLR   &kp BR_PLUS  &kp BR_N7  &kp BR_N8  &kp BR_N9   &kp BR_BSLH
       &kp BR_PRCNT  &kp BR_AMPS  &kp BR_ASTRK  &kp BR_LPAR  &kp BR_RPAR   &kp BR_MINUS  &kp BR_N4  &kp BR_N5  &kp BR_N6  &kp BR_COMMA
&none  &kp BR_UNDER  &kp BR_LBRC   &kp BR_RBRC    &kp BR_LT    &kp BR_GT   &kp BR_COLON  &kp BR_N1  &kp BR_N2  &kp BR_N3  &kp BR_EQUAL  &none
                                         &none        &none        &none   &kp BR_ASTRK  &kp BR_N0      &none
            >;
        };

        symbol_layer {
            bindings = <
       &kp BR_ASTRK  &kp BR_AMPS   &kp BR_LBRC  &kp BR_RBRC &kp BR_HASH      &caret    &U_acute  &A_tilde  &O_tilde  &kp BR_CCED
       &kp BR_SEMI   &kp BR_AT     &kp BR_LPAR  &kp BR_RPAR &kp BR_DQT       &grave    &I_acute  &A_acute  &O_acute  &E_acute
 &none &kp BR_EXCL   &kp BR_PRCNT  &kp BR_LBKT  &kp BR_RBKT &kp BR_PIPE      &A_grave  &E_circ   &A_circ   &O_circ   &tilde     &none
                                        &none  &kp BR_DLLR  &kp BR_UNDER     &none     &none     &none
           >;
      };




        function_layer {
            bindings = <
       &none  &none  &none  &none  &none     &none  &kp F1   &kp F2   &kp F3   &kp F4
       &none  &none  &none  &none  &none     &none  &kp F5   &kp F6   &kp F7   &kp F8
&none  &none  &none  &none  &none  &none     &none  &kp F9  &kp F10  &kp F11  &kp F12  &none
                     &none  &none  &none     &none  &none    &none
            >;
        };

        game_layer {
            bindings = <
         &kp TAB  &kp BR_Q  &kp BR_W   &kp BR_E   &kp BR_R      &kp C_VOL_UP  &kp BR_Y      &kp BR_N    &kp BR_V    &tog 5
       &kp LSHFT  &kp BR_A  &kp BR_S   &kp BR_D   &kp BR_F      &kp C_VOL_DN  &kp BR_T      &kp BR_M    &kp BR_I     &none
&none  &kp LCTRL  &kp BR_Z  &kp BR_X   &kp BR_C   &kp BR_B      &kp BR_N  &kp BR_M  &kp BR_COMMA  &kp BR_DOT  &kp LGUI  &none
                               &none  &lt 7 ESC  &kp SPACE      &none     &none         &none
            >;
        };

        nav_layer {
            bindings = <
       &kp PG_UP    &kp HOME      &kp END  &kp KP_PLUS       &none      &kp C_VOLUME_UP  &kp K_SCROLL_UP    &kp UP  &kp K_SCROLL_DOWN  &kp CAPS
        &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHIFT  &kp K_MUTE      &kp C_VOLUME_DOWN         &kp LEFT  &kp DOWN          &kp RIGHT   &kp DEL
&none  &kp PG_DN  &kp K_COPY  &kp K_PASTE    &kp K_CUT   &kp PSCRN      &none            &none     &none              &none     &none  &none
                                    &none        &none       &none      &none            &none     &none
            >;
        };

        fgame_layer {
            bindings = <
       &kp BR_N1  &kp BR_N2  &kp BR_N3  &kp BR_N4  &kp BR_N5     &kp C_VOL_UP  &kp BR_Y      &kp BR_N    &kp BR_V  &kp CAPS
          &kp F6   &kp BR_B   &kp BR_M   &kp BR_T   &kp BR_G     &kp C_VOL_DN  &kp BR_T      &kp BR_M    &kp BR_I     &none
&none     &kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &kp BR_N  &kp BR_M  &kp BR_COMMA  &kp BR_DOT  &kp LGUI  &none
                                 &none      &none      &none     &none     &none         &none
            >;
        };
    };
};
